{"ast":null,"code":"var _jsxFileName = \"C:\\\\OSPanel\\\\domains\\\\tsg-react\\\\src\\\\components\\\\slider\\\\Slider.js\",\n  _s = $RefreshSig$();\nimport \"./style.css\";\nimport React, { useEffect, useState, createContext } from 'react';\nimport PropTypes from \"prop-types\";\nimport images from \"./gallery.json\";\nimport Arrows from \"./components/controls/Arrows\";\nimport Dots from \"./components/controls/Dots\";\nimport SlidesList from \"./components/SlidesList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SliderContext = /*#__PURE__*/createContext();\nconst Slider = ({\n  width,\n  height,\n  autoPlay,\n  autoPlayTime\n}) => {\n  _s();\n  const [items, setItems] = useState(images);\n  const [slide, setSlide] = useState(0);\n  const [touchPosition, setTouchPosition] = useState(null);\n\n  /*   useEffect(() => {\r\n  const loadData = async () => {\r\n    const images = await getImages();\r\n    setItems(images);\r\n  };\r\n  loadData();\r\n  }, []);*/\n\n  const changeSlide = (direction = 1) => {\n    let slideNumber = 0;\n    if (slide + direction < 0) {\n      slideNumber = items.length - 1;\n    } else {\n      slideNumber = (slide + direction) % items.length;\n    }\n    setSlide(slideNumber);\n  };\n  const goToSlide = number => {\n    setSlide(number % items.length);\n  };\n  const handleTouchStart = e => {\n    const touchDown = e.touches[0].clientX;\n    setTouchPosition(touchDown);\n  };\n  const handleTouchMove = e => {\n    if (touchPosition === null) {\n      return;\n    }\n    const currentPosition = e.touches[0].clientX;\n    const direction = touchPosition - currentPosition;\n    if (direction > 10) {\n      changeSlide(1);\n    }\n    if (direction < -10) {\n      changeSlide(-1);\n    }\n    setTouchPosition(null);\n  };\n  useEffect(() => {\n    if (!autoPlay) return;\n    const interval = setInterval(() => {\n      changeSlide(1);\n    }, autoPlayTime);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [items.length, slide]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width,\n      height\n    },\n    className: \"slider\",\n    onTouchStart: handleTouchStart,\n    onTouchMove: handleTouchMove,\n    children: /*#__PURE__*/_jsxDEV(SliderContext.Provider, {\n      value: {\n        goToSlide,\n        changeSlide,\n        slidesCount: items.length / 3,\n        slideNumber: slide * 3,\n        items\n      },\n      children: [/*#__PURE__*/_jsxDEV(Arrows, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SlidesList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dots, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(Slider, \"cuJuvEY1Tws1t+nWYBjN8TveKx8=\");\n_c = Slider;\nSlider.propTypes = {\n  autoPlay: PropTypes.bool,\n  autoPlayTime: PropTypes.number,\n  width: PropTypes.string,\n  height: PropTypes.string\n};\nSlider.defaultProps = {\n  autoPlay: false,\n  autoPlayTime: 5000,\n  width: \"100%\",\n  height: \"100%\"\n};\n\n/*\r\nconst Slider = () => {\r\n    const [pictureList, setPictureList] = useState(data);\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    \r\n    const list = pictureList.map((picture, pictureIndex) => {\r\n        const {id, image, alt, query} = picture;\r\n\r\n        let position = \"slide\"\r\n\r\n        if(pictureIndex === currentIndex) position = 'activeSlide'\r\n        if(pictureIndex - 1 === currentIndex) position = 'nextSlide'\r\n        if(pictureIndex + 1 === currentIndex) position = 'prevSlide'\r\n        if(pictureIndex === pictureList.length - 1 && currentIndex === 0) position = 'prevSlide'\r\n        if(pictureIndex === 0 && currentIndex === pictureList.length - 1) position = 'nextSlide'\r\n        //if(pictureIndex === currentIndex - 1 || (currentIndex === 0 && pictureIndex === pictureList.length - 1)) position = 'lastslide'\r\n            \r\n        return (\r\n            <li className={position} key={id}>\r\n                <img src={image} alt={alt} title={query} />\r\n            </li>\r\n        ) \r\n    })\r\n\r\n    useEffect(()=> {\r\n        const lastSlide = pictureList.length - 1;\r\n        if (currentIndex < 0) setCurrentIndex(lastSlide)\r\n        if (currentIndex > lastSlide) setCurrentIndex(0)\r\n    }, [currentIndex, pictureList]\r\n    )\r\n    \r\n\r\n\r\n    return (\r\n        <div className=\"slider\">\r\n            <div className=\"slider-list\">\r\n                <ul className=\"slider-track\">\r\n                    {list}\r\n                 </ul>\r\n            </div>\r\n            <div className=\"slider-arrows\">\r\n                <button type=\"button\" className=\"prev\" onClick={() => setCurrentIndex(prevState => prevState - 1)}> &larr; </button>\r\n                <button type=\"button\" className=\"next\" onClick={() => setCurrentIndex(prevState => prevState + 1)}> &rarr; </button>\r\n            </div>\r\n      </div>\r\n    );\r\n  }\r\n  */\nexport default Slider;\nvar _c;\n$RefreshReg$(_c, \"Slider\");","map":{"version":3,"names":["React","useEffect","useState","createContext","PropTypes","images","Arrows","Dots","SlidesList","jsxDEV","_jsxDEV","SliderContext","Slider","width","height","autoPlay","autoPlayTime","_s","items","setItems","slide","setSlide","touchPosition","setTouchPosition","changeSlide","direction","slideNumber","length","goToSlide","number","handleTouchStart","e","touchDown","touches","clientX","handleTouchMove","currentPosition","interval","setInterval","clearInterval","style","className","onTouchStart","onTouchMove","children","Provider","value","slidesCount","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","bool","string","defaultProps","$RefreshReg$"],"sources":["C:/OSPanel/domains/tsg-react/src/components/slider/Slider.js"],"sourcesContent":["import \"./style.css\";\r\nimport React, { useEffect, useState, createContext } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport images from \"./gallery.json\";\r\n\r\nimport Arrows from \"./components/controls/Arrows\";\r\nimport Dots from \"./components/controls/Dots\";\r\n\r\nimport SlidesList from \"./components/SlidesList\";\r\n\r\nexport const SliderContext = createContext();\r\n\r\n\r\nconst Slider = ({ width, height, autoPlay, autoPlayTime }) => {\r\n\r\n    const [items, setItems] = useState(images);\r\n    const [slide, setSlide] = useState(0);\r\n    const [touchPosition, setTouchPosition] = useState(null)\r\n\r\n    /*   useEffect(() => {\r\n    const loadData = async () => {\r\n      const images = await getImages();\r\n      setItems(images);\r\n    };\r\n    loadData();\r\n  }, []);*/\r\n\r\n  const changeSlide = (direction = 1) => {\r\n    let slideNumber = 0;\r\n\r\n    if (slide + direction < 0) {\r\n      slideNumber = items.length - 1;\r\n    } else {\r\n      slideNumber = (slide + direction) % items.length;\r\n    }\r\n\r\n    setSlide(slideNumber);\r\n  };\r\n\r\n  const goToSlide = (number) => {\r\n    setSlide(number % items.length);\r\n  };\r\n\r\n  const handleTouchStart = (e) => {\r\n    const touchDown = e.touches[0].clientX;\r\n\r\n    setTouchPosition(touchDown);\r\n  }\r\n\r\n  const handleTouchMove = (e) => {\r\n    if (touchPosition === null) {\r\n      return;\r\n    }\r\n\r\n    const currentPosition = e.touches[0].clientX;\r\n    const direction = touchPosition - currentPosition;\r\n\r\n    if (direction > 10) {\r\n      changeSlide(1);\r\n    }\r\n\r\n    if (direction < -10) {\r\n      changeSlide(-1);\r\n    }\r\n\r\n    setTouchPosition(null);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!autoPlay) return;\r\n\r\n    const interval = setInterval(() => {\r\n      changeSlide(1);\r\n    }, autoPlayTime);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [items.length, slide]); \r\n\r\n\r\n  return (\r\n    <div\r\n      style={{ width, height }}\r\n      className=\"slider\"\r\n      onTouchStart={handleTouchStart}\r\n      onTouchMove={handleTouchMove}\r\n    >\r\n      <SliderContext.Provider\r\n        value={{\r\n          goToSlide,\r\n          changeSlide,\r\n          slidesCount: items.length/3,\r\n          slideNumber: slide*3,\r\n          items,\r\n        }}\r\n      >\r\n        <Arrows />\r\n        <SlidesList />\r\n        <Dots />\r\n      </SliderContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nSlider.propTypes = {\r\n  autoPlay: PropTypes.bool,\r\n  autoPlayTime: PropTypes.number,\r\n  width: PropTypes.string,\r\n  height: PropTypes.string\r\n};\r\n\r\nSlider.defaultProps = {\r\n  autoPlay: false,\r\n  autoPlayTime: 5000,\r\n  width: \"100%\",\r\n  height: \"100%\"\r\n};\r\n\r\n\r\n/*\r\nconst Slider = () => {\r\n    const [pictureList, setPictureList] = useState(data);\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    \r\n    const list = pictureList.map((picture, pictureIndex) => {\r\n        const {id, image, alt, query} = picture;\r\n\r\n        let position = \"slide\"\r\n\r\n        if(pictureIndex === currentIndex) position = 'activeSlide'\r\n        if(pictureIndex - 1 === currentIndex) position = 'nextSlide'\r\n        if(pictureIndex + 1 === currentIndex) position = 'prevSlide'\r\n        if(pictureIndex === pictureList.length - 1 && currentIndex === 0) position = 'prevSlide'\r\n        if(pictureIndex === 0 && currentIndex === pictureList.length - 1) position = 'nextSlide'\r\n        //if(pictureIndex === currentIndex - 1 || (currentIndex === 0 && pictureIndex === pictureList.length - 1)) position = 'lastslide'\r\n            \r\n        return (\r\n            <li className={position} key={id}>\r\n                <img src={image} alt={alt} title={query} />\r\n            </li>\r\n        ) \r\n    })\r\n\r\n    useEffect(()=> {\r\n        const lastSlide = pictureList.length - 1;\r\n        if (currentIndex < 0) setCurrentIndex(lastSlide)\r\n        if (currentIndex > lastSlide) setCurrentIndex(0)\r\n    }, [currentIndex, pictureList]\r\n    )\r\n    \r\n\r\n\r\n    return (\r\n        <div className=\"slider\">\r\n            <div className=\"slider-list\">\r\n                <ul className=\"slider-track\">\r\n                    {list}\r\n                 </ul>\r\n            </div>\r\n            <div className=\"slider-arrows\">\r\n                <button type=\"button\" className=\"prev\" onClick={() => setCurrentIndex(prevState => prevState - 1)}> &larr; </button>\r\n                <button type=\"button\" className=\"next\" onClick={() => setCurrentIndex(prevState => prevState + 1)}> &rarr; </button>\r\n            </div>\r\n      </div>\r\n    );\r\n  }\r\n  */\r\n  export default Slider;"],"mappings":"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,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV,CAAC;AAAClC,EAAA,CA1FIL,MAAM;AAAAwC,EAAA,GAANxC,MAAM;AA4FZA,MAAM,CAACyC,SAAS,GAAG;EACjBtC,QAAQ,EAAEX,SAAS,CAACkD,IAAI;EACxBtC,YAAY,EAAEZ,SAAS,CAACyB,MAAM;EAC9BhB,KAAK,EAAET,SAAS,CAACmD,MAAM;EACvBzC,MAAM,EAAEV,SAAS,CAACmD;AACpB,CAAC;AAED3C,MAAM,CAAC4C,YAAY,GAAG;EACpBzC,QAAQ,EAAE,KAAK;EACfC,YAAY,EAAE,IAAI;EAClBH,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE;AACV,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,eAAeF,MAAM;AAAC,IAAAwC,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}